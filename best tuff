-- LocalScript: StageTPGui (mobile-friendly, persistent, auto-cleanup)
-- Put this in StarterGui

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local Events = ReplicatedStorage:WaitForChild("Events")
local CheckpointEvent = Events:WaitForChild("CheckpointReached")

-- === Clean up old GUI if present (prevents duplicates on re-execute) ===
local EXISTING_NAME = "StageTPGui"
local old = playerGui:FindFirstChild(EXISTING_NAME)
if old then
	old:Destroy()
end

-- === Create ScreenGui (persistent across respawn) ===
local screenGui = Instance.new("ScreenGui")
screenGui.Name = EXISTING_NAME
screenGui.ResetOnSpawn = false -- persist through death
screenGui.Parent = playerGui

-- === Utility - create rounded frame/button helper ===
local function round(obj, radius)
	local c = Instance.new("UICorner")
	c.CornerRadius = UDim.new(0, radius or 8)
	c.Parent = obj
end

local function createButton(text, parent)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0.9, 0, 0, 40)
	btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	btn.TextColor3 = Color3.fromRGB(255,255,255)
	btn.Font = Enum.Font.GothamSemibold
	btn.TextSize = 16
	btn.AutoButtonColor = true
	btn.Text = text
	btn.Parent = parent
	round(btn, 6)
	-- Make touch friendly (bigger hitbox on mobile)
	btn.SelectionImageObject = nil
	return btn
end

-- === Main container (center, responsive) ===
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 340, 0, 260)
MainFrame.Position = UDim2.new(0.5, -170, 0.5, -130)
MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
MainFrame.BackgroundColor3 = Color3.fromRGB(25,25,25)
MainFrame.Active = true -- needed for touch InputChanged
MainFrame.Parent = screenGui
round(MainFrame, 12)

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, 0, 0, 44)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(38,38,38)
Title.TextColor3 = Color3.fromRGB(255,255,255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 18
Title.Text = "Stage Teleporter"
Title.Parent = MainFrame
round(Title, 8)

local Content = Instance.new("Frame")
Content.Name = "Content"
Content.Size = UDim2.new(1, -12, 1, -54)
Content.Position = UDim2.new(0, 6, 0, 50)
Content.BackgroundTransparency = 1
Content.Parent = MainFrame

local UIList = Instance.new("UIListLayout", Content)
UIList.Padding = UDim.new(0, 6)
UIList.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIList.VerticalAlignment = Enum.VerticalAlignment.Top

-- === Dragging (mouse + touch) ===
-- === Hard Dragging (mouse + touch) ===
do
	local dragging = false
	local dragStartPos, guiStartPos

	local function beginDrag(input)
		dragging = true
		dragStartPos = input.Position
		guiStartPos = MainFrame.Position
	end

	local function updateDrag(input)
		if not dragging then return end
		local delta = input.Position - dragStartPos
		MainFrame.Position = UDim2.new(
			guiStartPos.X.Scale,
			guiStartPos.X.Offset + delta.X,
			guiStartPos.Y.Scale,
			guiStartPos.Y.Offset + delta.Y
		)
	end

	local function endDrag()
		dragging = false
	end

	-- Mouse drag
	Title.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			beginDrag(input)
		end
	end)
	Title.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			updateDrag(input)
		end
	end)
	Title.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			endDrag()
		end
	end)

	-- Mobile drag anywhere on the frame
	MainFrame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			beginDrag(input)
		end
	end)
	MainFrame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			updateDrag(input)
		end
	end)
	MainFrame.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			endDrag()
		end
	end)
end

-- === Safe teleport wrapper (wait for character & fire remote after teleport) ===
local function safeTeleportTo(part, checkpointId)
	if not part or not part:IsA("BasePart") then return false end
	local char = player.Character or player.CharacterAdded:Wait()
	local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")
	if not hrp then return false end

	-- Move first, then wait and fire event
	hrp.CFrame = part.CFrame + Vector3.new(0, 3, 0)
	-- small pause to avoid weird immediate reverts from server scripts
	task.wait(0.14)
	pcall(function()
		firesignal(CheckpointEvent.OnClientEvent, checkpointId)
	end)
	return true
end

-- === Helpers to show pages ===
local function clearContent()
	for _, c in ipairs(Content:GetChildren()) do
		if c ~= UIList then
			c:Destroy()
		end
	end
end

local function makeBackButton()
	local back = createButton("‚Üê Back", Content)
	back.Size = UDim2.new(0.8, 0, 0, 36)
	back.MouseButton1Click:Connect(function()
		clearContent()
		mainMenu()
	end)
	-- touch support (InputBegan with touch)
	back.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			back:CaptureFocus()
			back.MouseButton1Click:Fire()
		end
	end)
	return back
end

-- === Pages ===
function showMainCourse()
	clearContent()
	local label = Instance.new("TextLabel", Content)
	label.Size = UDim2.new(0.9, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.fromRGB(220,220,220)
	label.Font = Enum.Font.Gotham
	label.TextSize = 14
	label.Text = "Enter Main Course stage (1 - 381):"

	local input = Instance.new("TextBox", Content)
	input.Size = UDim2.new(0.9, 0, 0, 40)
	input.PlaceholderText = "e.g. 57"
	input.BackgroundColor3 = Color3.fromRGB(45,45,45)
	input.TextColor3 = Color3.fromRGB(255,255,255)
	input.Font = Enum.Font.Gotham
	input.TextSize = 16
	round(input, 6)

	local go = createButton("Teleport", Content)
	go.MouseButton1Click:Connect(function()
		local n = tonumber(input.Text)
		if not n or n < 1 or n > 381 then
			go.Text = "Invalid"
			task.wait(0.9)
			go.Text = "Teleport"
			return
		end
		local ok, part = pcall(function()
			return workspace:FindFirstChild("Checkpoints") and workspace.Checkpoints:FindFirstChild(tostring(n)) and workspace.Checkpoints[tostring(n)]:FindFirstChild("Part") and workspace.Checkpoints[tostring(n)].Part
		end)
		if part then
			safeTeleportTo(part, n)
		else
			go.Text = "Not found"
			task.wait(0.9)
			go.Text = "Teleport"
		end
	end)
	-- touch fallback
	go.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			go:CaptureFocus()
			go.MouseButton1Click:Fire()
		end
	end)

	makeBackButton()
end

function showMonthly()
	clearContent()
	local label = Instance.new("TextLabel", Content)
	label.Size = UDim2.new(0.9, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.fromRGB(220,220,220)
	label.Font = Enum.Font.Gotham
	label.TextSize = 14
	label.Text = "Enter Monthly stage (1 - 31):"

	local input = Instance.new("TextBox", Content)
	input.Size = UDim2.new(0.9, 0, 0, 40)
	input.PlaceholderText = "e.g. 5"
	input.BackgroundColor3 = Color3.fromRGB(45,45,45)
	input.TextColor3 = Color3.fromRGB(255,255,255)
	input.Font = Enum.Font.Gotham
	input.TextSize = 16
	round(input, 6)

	local go = createButton("Teleport", Content)
	go.MouseButton1Click:Connect(function()
		local n = tonumber(input.Text)
		if not n or n < 1 or n > 31 then
			go.Text = "Invalid"
			task.wait(0.9)
			go.Text = "Teleport"
			return
		end
		local part = workspace:FindFirstChild("CheckpointsMonthly") and workspace.CheckpointsMonthly:FindFirstChild(tostring(n)) and workspace.CheckpointsMonthly[tostring(n)]:FindFirstChild("PrimaryP") and workspace.CheckpointsMonthly[tostring(n)].PrimaryP
		if part then
			safeTeleportTo(part, n)
		else
			go.Text = "Not found"
			task.wait(0.9)
			go.Text = "Teleport"
		end
	end)
	go.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			go:CaptureFocus()
			go.MouseButton1Click:Fire()
		end
	end)

	makeBackButton()
end

function showPro()
	clearContent()
	local label = Instance.new("TextLabel", Content)
	label.Size = UDim2.new(0.9, 0, 0, 20)
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.fromRGB(220,220,220)
	label.Font = Enum.Font.Gotham
	label.TextSize = 14
	label.Text = "Enter Pro stage (1 - 31):"

	local input = Instance.new("TextBox", Content)
	input.Size = UDim2.new(0.9, 0, 0, 40)
	input.PlaceholderText = "e.g. 12"
	input.BackgroundColor3 = Color3.fromRGB(45,45,45)
	input.TextColor3 = Color3.fromRGB(255,255,255)
	input.Font = Enum.Font.Gotham
	input.TextSize = 16
	round(input, 6)

	local go = createButton("Teleport", Content)
	go.MouseButton1Click:Connect(function()
		local n = tonumber(input.Text)
		if not n or n < 1 or n > 31 then
			go.Text = "Invalid"
			task.wait(0.9)
			go.Text = "Teleport"
			return
		end
		local part = workspace:FindFirstChild("CheckpointsPro") and workspace.CheckpointsPro:FindFirstChild(tostring(n)) and workspace.CheckpointsPro[tostring(n)]:FindFirstChild("PrimaryP") and workspace.CheckpointsPro[tostring(n)].PrimaryP
		if part then
			safeTeleportTo(part, n)
		else
			go.Text = "Not found"
			task.wait(0.9)
			go.Text = "Teleport"
		end
	end)
	go.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.Touch then
			go:CaptureFocus()
			go.MouseButton1Click:Fire()
		end
	end)

	makeBackButton()
end

function showExperimental()
	clearContent()

	-- explicit safe lookup for experimental stage parts
	local function getExpPart(index)
		local ok, result = pcall(function()
			local node = workspace:FindFirstChild("Experimental") and workspace.Experimental:FindFirstChild("Stage") and workspace.Experimental.Stage:FindFirstChild("Experimental12")
			if not node then return nil end
			local cp = node:FindFirstChild("Checkpoints") and node.Checkpoints:FindFirstChild(tostring(index))
			if cp then
				return cp:FindFirstChild("Part")
			end
			return nil
		end)
		return result
	end

	for i = 1, 3 do
		local btn = createButton("Complete Stage " .. i, Content)
		btn.MouseButton1Click:Connect(function()
			local part = getExpPart(i)
			if part then
				safeTeleportTo(part, i)
			else
				btn.Text = "Not found"
				task.wait(0.9)
				btn.Text = "Complete Stage " .. i
			end
		end)
		btn.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.Touch then
				btn:CaptureFocus()
				btn.MouseButton1Click:Fire()
			end
		end)
	end

	makeBackButton()
end

-- === Main menu builder ===
function mainMenu()
	clearContent()
	local b1 = createButton("Main Course", Content)
	local b2 = createButton("Monthly Challenge", Content)
	local b3 = createButton("Pro Challenge", Content)
	local b4 = createButton("Experimental", Content)

	-- reduce text length on small screens
	local function adaptForMobile()
		if UserInputService.TouchEnabled and not UserInputService.MouseEnabled then
			b1.Text = "Main"
			b2.Text = "Monthly"
			b3.Text = "Pro"
			b4.Text = "Experimental"
		end
	end
	adaptForMobile()

	b1.MouseButton1Click:Connect(showMainCourse)
	b2.MouseButton1Click:Connect(showMonthly)
	b3.MouseButton1Click:Connect(showPro)
	b4.MouseButton1Click:Connect(showExperimental)

	-- also add touch fallback to the buttons (so they trigger reliably on mobile)
	for _, btn in ipairs({b1,b2,b3,b4}) do
		btn.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.Touch then
				btn:CaptureFocus()
				btn.MouseButton1Click:Fire()
			end
		end)
	end
end

-- start
mainMenu()

-- === Ensure GUI persists and isn't duplicated after death/respawn
-- ResetOnSpawn = false already preserves GUI. If LocalScript runs again it will destroy old GUI at top of script.
